// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`typegen generateRosDeclarations basic snapshot 1`] = `
"
    declare interface TopicsToTypeDefinitions {
    \\"/my_topic\\": Datatypes.std_msgs__ColorRGBA;
}
    export declare interface Duration {
    sec: number;
    nsec: number;
}
    export declare interface Time {
    sec: number;
    nsec: number;
}

    /**
     * This type contains every message declaration in your bag, so that you can
     * refer to the type \\"std_msgs/RGBA\\" as \\"std_msgs__RGBA\\" wherever you like.
     */
    export declare namespace Datatypes {
    export interface std_msgs__ColorRGBA {
        r: number;
        g: number;
        b: number;
        a: number;
    }
}

    /**
     * To correctly type your inputs, you use this type to refer to specific
     * input topics, e.g. 'TypedMessage<\\"/your_input_topic\\">'. If you have
     * multiple input topics, use a union type, e.g.
     * 'TypedMessage<\\"/your_input_topic_1\\"> |
     * TypedMessage<\\"/your_input_topic_2\\">'.
     *
     * These types are dynamically generated from the bag(s) currently in your
     * webviz session, so if a datatype changes, your Node Playground node may
     * not compile on the newly formatted bag.
     */
    export declare interface TypedMessage<T extends keyof TopicsToTypeDefinitions> {
    topic: T;
    datatype: string;
    op: \\"message\\";
    receiveTime: Time;
    message: TopicsToTypeDefinitions[T];
}
  "
`;

exports[`typegen generateRosDeclarations more complex snapshot 1`] = `
"
    declare interface TopicsToTypeDefinitions {
    \\"/topic_0\\": Datatypes.tf2_msgs__TFMessage;
    \\"/topic_1\\": Datatypes.geometry_msgs__TransformStamped;
    \\"/topic_2\\": Datatypes.std_msgs__Header;
    \\"/topic_3\\": Datatypes.geometry_msgs__Transform;
    \\"/topic_4\\": Datatypes.geometry_msgs__Vector3;
    \\"/topic_5\\": Datatypes.geometry_msgs__Quaternion;
    \\"/topic_6\\": Datatypes.sensor_msgs__Image;
    \\"/topic_7\\": Datatypes.velodyne_msgs__VelodyneScan;
    \\"/topic_8\\": Datatypes.velodyne_msgs__VelodynePacket;
    \\"/topic_9\\": Datatypes.sensor_msgs__PointCloud2;
    \\"/topic_10\\": Datatypes.sensor_msgs__PointField;
    \\"/topic_11\\": Datatypes.sensor_msgs__Range;
    \\"/topic_12\\": Datatypes.radar_driver__RadarTracks;
    \\"/topic_13\\": Datatypes.radar_driver__Track;
    \\"/topic_14\\": Datatypes.diagnostic_msgs__DiagnosticStatus;
    \\"/topic_15\\": Datatypes.diagnostic_msgs__KeyValue;
    \\"/topic_16\\": Datatypes.diagnostic_msgs__DiagnosticArray;
    \\"/topic_17\\": Datatypes.sensor_msgs__TimeReference;
    \\"/topic_18\\": Datatypes.sensor_msgs__NavSatFix;
    \\"/topic_19\\": Datatypes.sensor_msgs__NavSatStatus;
    \\"/topic_20\\": Datatypes.nav_msgs__Odometry;
    \\"/topic_21\\": Datatypes.geometry_msgs__PoseWithCovariance;
    \\"/topic_22\\": Datatypes.geometry_msgs__Pose;
    \\"/topic_23\\": Datatypes.geometry_msgs__Point;
    \\"/topic_24\\": Datatypes.geometry_msgs__TwistWithCovariance;
    \\"/topic_25\\": Datatypes.geometry_msgs__Twist;
    \\"/topic_26\\": Datatypes.bond__Status;
}
    export declare interface Duration {
    sec: number;
    nsec: number;
}
    export declare interface Time {
    sec: number;
    nsec: number;
}

    /**
     * This type contains every message declaration in your bag, so that you can
     * refer to the type \\"std_msgs/RGBA\\" as \\"std_msgs__RGBA\\" wherever you like.
     */
    export declare namespace Datatypes {
    export interface tf2_msgs__TFMessage {
        transforms: geometry_msgs__TransformStamped[];
    }
    export interface geometry_msgs__TransformStamped {
        header: std_msgs__Header;
        child_frame_id: string;
        transform: geometry_msgs__Transform;
    }
    export interface std_msgs__Header {
        seq: number;
        stamp: Time;
        frame_id: string;
    }
    export interface geometry_msgs__Transform {
        translation: geometry_msgs__Vector3;
        rotation: geometry_msgs__Quaternion;
    }
    export interface geometry_msgs__Vector3 {
        x: number;
        y: number;
        z: number;
    }
    export interface geometry_msgs__Quaternion {
        x: number;
        y: number;
        z: number;
        w: number;
    }
    export interface sensor_msgs__Image {
        header: std_msgs__Header;
        height: number;
        width: number;
        encoding: string;
        is_bigendian: number;
        step: number;
        data: Uint8Array[];
    }
    export interface velodyne_msgs__VelodyneScan {
        header: std_msgs__Header;
        packets: velodyne_msgs__VelodynePacket[];
    }
    export interface velodyne_msgs__VelodynePacket {
        stamp: Time;
        data: Uint8Array[];
    }
    export interface sensor_msgs__PointCloud2 {
        header: std_msgs__Header;
        height: number;
        width: number;
        fields: sensor_msgs__PointField[];
        is_bigendian: boolean;
        point_step: number;
        row_step: number;
        data: Uint8Array[];
        is_dense: boolean;
    }
    export interface sensor_msgs__PointField {
        name: string;
        offset: number;
        datatype: number;
        count: number;
    }
    export interface sensor_msgs__Range {
        header: std_msgs__Header;
        radiation_type: number;
        field_of_view: number;
        min_range: number;
        max_range: number;
        range: number;
    }
    export interface radar_driver__RadarTracks {
        header: std_msgs__Header;
        tracks: radar_driver__Track[];
    }
    export interface radar_driver__Track {
        status: number;
        number: number;
        range: number;
        rate: number;
        accel: number;
        angle: number;
        width: number;
        late_rate: number;
        moving: boolean;
        power: number;
        absolute_rate: number;
    }
    export interface diagnostic_msgs__DiagnosticStatus {
        level: number;
        name: string;
        message: string;
        hardware_id: string;
        values: diagnostic_msgs__KeyValue[];
    }
    export interface diagnostic_msgs__KeyValue {
        key: string;
        value: string;
    }
    export interface diagnostic_msgs__DiagnosticArray {
        header: std_msgs__Header;
        status: diagnostic_msgs__DiagnosticStatus[];
    }
    export interface sensor_msgs__TimeReference {
        header: std_msgs__Header;
        time_ref: Time;
        source: string;
    }
    export interface sensor_msgs__NavSatFix {
        header: std_msgs__Header;
        status: sensor_msgs__NavSatStatus;
        latitude: number;
        longitude: number;
        altitude: number;
        position_covariance: number[];
        position_covariance_type: number;
    }
    export interface sensor_msgs__NavSatStatus {
        status: number;
        service: number;
    }
    export interface nav_msgs__Odometry {
        header: std_msgs__Header;
        child_frame_id: string;
        pose: geometry_msgs__PoseWithCovariance;
        twist: geometry_msgs__TwistWithCovariance;
    }
    export interface geometry_msgs__PoseWithCovariance {
        pose: geometry_msgs__Pose;
        covariance: number[];
    }
    export interface geometry_msgs__Pose {
        position: geometry_msgs__Point;
        orientation: geometry_msgs__Quaternion;
    }
    export interface geometry_msgs__Point {
        x: number;
        y: number;
        z: number;
    }
    export interface geometry_msgs__TwistWithCovariance {
        twist: geometry_msgs__Twist;
        covariance: number[];
    }
    export interface geometry_msgs__Twist {
        linear: geometry_msgs__Vector3;
        angular: geometry_msgs__Vector3;
    }
    export interface bond__Status {
        header: std_msgs__Header;
        id: string;
        instance_id: string;
        active: boolean;
        heartbeat_timeout: number;
        heartbeat_period: number;
    }
}

    /**
     * To correctly type your inputs, you use this type to refer to specific
     * input topics, e.g. 'TypedMessage<\\"/your_input_topic\\">'. If you have
     * multiple input topics, use a union type, e.g.
     * 'TypedMessage<\\"/your_input_topic_1\\"> |
     * TypedMessage<\\"/your_input_topic_2\\">'.
     *
     * These types are dynamically generated from the bag(s) currently in your
     * webviz session, so if a datatype changes, your Node Playground node may
     * not compile on the newly formatted bag.
     */
    export declare interface TypedMessage<T extends keyof TopicsToTypeDefinitions> {
    topic: T;
    datatype: string;
    op: \\"message\\";
    receiveTime: Time;
    message: TopicsToTypeDefinitions[T];
}
  "
`;

exports[`typegen generateRosDeclarations works with zero topics or datatypes 1`] = `
"
    export declare interface TopicsToTypeDefinitions {
}
    export declare interface Duration {
    sec: number;
    nsec: number;
}
    export declare interface Time {
    sec: number;
    nsec: number;
}

    /**
     * This type contains every message declaration in your bag, so that you can
     * refer to the type \\"std_msgs/RGBA\\" as \\"std_msgs__RGBA\\" wherever you like.
     */
    export declare namespace Datatypes { }

    /**
     * To correctly type your inputs, you use this type to refer to specific
     * input topics, e.g. 'TypedMessage<\\"/your_input_topic\\">'. If you have
     * multiple input topics, use a union type, e.g.
     * 'TypedMessage<\\"/your_input_topic_1\\"> |
     * TypedMessage<\\"/your_input_topic_2\\">'.
     *
     * These types are dynamically generated from the bag(s) currently in your
     * webviz session, so if a datatype changes, your Node Playground node may
     * not compile on the newly formatted bag.
     */
    export declare interface TypedMessage<T extends keyof TopicsToTypeDefinitions> {
    topic: T;
    datatype: string;
    op: \\"message\\";
    receiveTime: Time;
    message: TopicsToTypeDefinitions[T];
}
  "
`;
