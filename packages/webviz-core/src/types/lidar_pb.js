// source: lidar.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_protos_header_pb = require('./common_protos/header_pb.js');
goog.object.extend(proto, common_protos_header_pb);
goog.exportSymbol('proto.cargo.lidar.PointCloud', null, global);
goog.exportSymbol('proto.cargo.lidar.PointCloud.ReturnType', null, global);
goog.exportSymbol('proto.cargo.lidar.Scan', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cargo.lidar.Scan = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cargo.lidar.Scan, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cargo.lidar.Scan.displayName = 'proto.cargo.lidar.Scan';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cargo.lidar.PointCloud = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cargo.lidar.PointCloud, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cargo.lidar.PointCloud.displayName = 'proto.cargo.lidar.PointCloud';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cargo.lidar.Scan.prototype.toObject = function(opt_includeInstance) {
  return proto.cargo.lidar.Scan.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cargo.lidar.Scan} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cargo.lidar.Scan.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cargo.lidar.Scan}
 */
proto.cargo.lidar.Scan.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cargo.lidar.Scan;
  return proto.cargo.lidar.Scan.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cargo.lidar.Scan} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cargo.lidar.Scan}
 */
proto.cargo.lidar.Scan.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndTime(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cargo.lidar.Scan.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cargo.lidar.Scan.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cargo.lidar.Scan} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cargo.lidar.Scan.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTime();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional int64 start_time = 1;
 * @return {number}
 */
proto.cargo.lidar.Scan.prototype.getStartTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cargo.lidar.Scan} returns this
 */
proto.cargo.lidar.Scan.prototype.setStartTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 end_time = 2;
 * @return {number}
 */
proto.cargo.lidar.Scan.prototype.getEndTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.cargo.lidar.Scan} returns this
 */
proto.cargo.lidar.Scan.prototype.setEndTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes data = 10;
 * @return {!(string|Uint8Array)}
 */
proto.cargo.lidar.Scan.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes data = 10;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.cargo.lidar.Scan.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.cargo.lidar.Scan.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cargo.lidar.Scan} returns this
 */
proto.cargo.lidar.Scan.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cargo.lidar.PointCloud.prototype.toObject = function(opt_includeInstance) {
  return proto.cargo.lidar.PointCloud.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cargo.lidar.PointCloud} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cargo.lidar.PointCloud.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && common_protos_header_pb.Header.toObject(includeInstance, f),
    returnType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    scan: (f = msg.getScan()) && proto.cargo.lidar.Scan.toObject(includeInstance, f),
    scanDual: (f = msg.getScanDual()) && proto.cargo.lidar.Scan.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cargo.lidar.PointCloud}
 */
proto.cargo.lidar.PointCloud.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cargo.lidar.PointCloud;
  return proto.cargo.lidar.PointCloud.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cargo.lidar.PointCloud} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cargo.lidar.PointCloud}
 */
proto.cargo.lidar.PointCloud.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_protos_header_pb.Header;
      reader.readMessage(value,common_protos_header_pb.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 5:
      var value = /** @type {!proto.cargo.lidar.PointCloud.ReturnType} */ (reader.readEnum());
      msg.setReturnType(value);
      break;
    case 10:
      var value = new proto.cargo.lidar.Scan;
      reader.readMessage(value,proto.cargo.lidar.Scan.deserializeBinaryFromReader);
      msg.setScan(value);
      break;
    case 11:
      var value = new proto.cargo.lidar.Scan;
      reader.readMessage(value,proto.cargo.lidar.Scan.deserializeBinaryFromReader);
      msg.setScanDual(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cargo.lidar.PointCloud.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cargo.lidar.PointCloud.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cargo.lidar.PointCloud} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cargo.lidar.PointCloud.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_protos_header_pb.Header.serializeBinaryToWriter
    );
  }
  f = message.getReturnType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getScan();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.cargo.lidar.Scan.serializeBinaryToWriter
    );
  }
  f = message.getScanDual();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.cargo.lidar.Scan.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.cargo.lidar.PointCloud.ReturnType = {
  STRONGEST: 0,
  LAST: 1,
  DUAL: 2,
  FIRST: 3,
  DUAL_LAST_FIRST: 4,
  DUAL_FIRST_STRONGEST: 5
};

/**
 * optional cargo.common.Header header = 1;
 * @return {?proto.cargo.common.Header}
 */
proto.cargo.lidar.PointCloud.prototype.getHeader = function() {
  return /** @type{?proto.cargo.common.Header} */ (
    jspb.Message.getWrapperField(this, common_protos_header_pb.Header, 1));
};


/**
 * @param {?proto.cargo.common.Header|undefined} value
 * @return {!proto.cargo.lidar.PointCloud} returns this
*/
proto.cargo.lidar.PointCloud.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cargo.lidar.PointCloud} returns this
 */
proto.cargo.lidar.PointCloud.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cargo.lidar.PointCloud.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ReturnType return_type = 5;
 * @return {!proto.cargo.lidar.PointCloud.ReturnType}
 */
proto.cargo.lidar.PointCloud.prototype.getReturnType = function() {
  return /** @type {!proto.cargo.lidar.PointCloud.ReturnType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.cargo.lidar.PointCloud.ReturnType} value
 * @return {!proto.cargo.lidar.PointCloud} returns this
 */
proto.cargo.lidar.PointCloud.prototype.setReturnType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional Scan scan = 10;
 * @return {?proto.cargo.lidar.Scan}
 */
proto.cargo.lidar.PointCloud.prototype.getScan = function() {
  return /** @type{?proto.cargo.lidar.Scan} */ (
    jspb.Message.getWrapperField(this, proto.cargo.lidar.Scan, 10));
};


/**
 * @param {?proto.cargo.lidar.Scan|undefined} value
 * @return {!proto.cargo.lidar.PointCloud} returns this
*/
proto.cargo.lidar.PointCloud.prototype.setScan = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cargo.lidar.PointCloud} returns this
 */
proto.cargo.lidar.PointCloud.prototype.clearScan = function() {
  return this.setScan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cargo.lidar.PointCloud.prototype.hasScan = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Scan scan_dual = 11;
 * @return {?proto.cargo.lidar.Scan}
 */
proto.cargo.lidar.PointCloud.prototype.getScanDual = function() {
  return /** @type{?proto.cargo.lidar.Scan} */ (
    jspb.Message.getWrapperField(this, proto.cargo.lidar.Scan, 11));
};


/**
 * @param {?proto.cargo.lidar.Scan|undefined} value
 * @return {!proto.cargo.lidar.PointCloud} returns this
*/
proto.cargo.lidar.PointCloud.prototype.setScanDual = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cargo.lidar.PointCloud} returns this
 */
proto.cargo.lidar.PointCloud.prototype.clearScanDual = function() {
  return this.setScanDual(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cargo.lidar.PointCloud.prototype.hasScanDual = function() {
  return jspb.Message.getField(this, 11) != null;
};


goog.object.extend(exports, proto.cargo.lidar);
